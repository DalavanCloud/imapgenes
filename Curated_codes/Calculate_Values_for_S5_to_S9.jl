######################################################################## # Codes for the paper:
# An Anthropocene Map of Genetic Diversity
#
# Andreia Miraldo, Sen Li, Michael K. Borregaard, Alexander Floréz-Rodriguéz, Shyam Gopalakrishnan, Mirneza Risvanovic, Zhiheng Wang, Carsten Rahbek, Katharine A. Marske & David Nogués-Bravo
#
# Submitted to Science, 2016
# Code in this file by Michael K. Borregaard
#########################################################################

#Load the necessary library
using DataFrames
include("GD_summary_functions.jl")

"""
Do a rarefaction where all grid cell / species combinations with > N sequences get resampled to exactly N sequences
**Parameters**
* 'data' : a matrix generated by create_master_matrices()
* 'N'    : the number of sequences to rarefy down to
"""
function rare(data::DataFrame, N::Int)
    subset = by(dats, [:species, :cell]) do dat
        seqs = unique(vcat(dat[:seq1], dat[:seq2]))
        if size(seqs,1) < N
            return(dat[1:0,:])
        end
        randseqs = sample(seqs, N, replace = false)
        dat = dat[findin(dat[:seq1], randseqs),:]
        dat = dat[findin(dat[:seq2], randseqs),:]
        dat
    end
    ret, = calcGD(subset)
    ret
end

rarefy(data, N, reps::Int) = hcat([rare(data, N)[:GDval] for i in 1:reps]...)


# Read in the matrices for mammals and amphibians and concatenate them
am = ready_data("pairwise_equalarea_amphibians_cytb.csv")
ma = ready_data("pairwise_equalarea_mammals_cytb.csv")
dats = vcat(am, ma)

# Calculate GD values for those grid cells and species with less than 10 sequences
less_than_10s = by(dats, [:species, :cell]) do dat
    seqs = unique(vcat(dat[:seq1], dat[:seq2]))
    size(seqs, 1) < 10 ? dat : dat[1:0,:]
end

Supp_F1_data, = calc_cellvalues(less_than_10s)
writetable("Supp_Less10_numbers.csv", Supp_F1_data)

# Calculate GD values for those grid cells and species with less than 10 sequences
less_than_5s = by(dats, [:species, :cell]) do dat
    seqs = unique(vcat(dat[:seq1], dat[:seq2]))
    size(seqs, 1) < 5 ? dat : dat[1:0,:]
end

Supp_F4_data, = calc_cellvalues(less_than_5s)
writetable("Supp_Less5_numbers.csv", Supp_F4_data)


# Calculate GD values for those grid cell and species with more than 10 sequences
at_least_10s = by(dats, [:species, :cell]) do dat
    seqs = unique(vcat(dat[:seq1], dat[:seq2]))
    size(seqs, 1) >= 10 ? dat : dat[1:0,:]
end

Supp_F2_data, = calcGD(at_least_10s)
writetable("Supp_Atleast10_numbers.csv", Supp_F2_data)

# Calculate GD values for those grid cell and species with more than 5 sequences
at_least_5s = by(dats, [:species, :cell]) do dat
    seqs = unique(vcat(dat[:seq1], dat[:seq2]))
    size(seqs, 1) >= 5 ? dat : dat[1:0,:]
end

Supp_F5_data, = calcGD(at_least_5s)
writetable("Supp_AtLeast5_numbers.csv", Supp_F5_data)
# Calculate GD values from a rarefaction

for N in [5,10]
    # Create a matrix with a 100 realisations
    samples = rarefy(dats, N, 100)

    # Calculate mean and standard deviations from these samples
    rare_means = mean(samples, 2)
    rare_sds = std(samples, 2)
    Supp_f3_data = rarefy(dats, N)
    Supp_f3_data = DataFrame(cell = Supp_f3_data[:site], rare_mean = vec(rare_means), rare_sd = vec(rare_sds))

    writetable("Supp_Rarefy_numbers_$N.csv", Supp_f3_data)
    writecsv("All_rarefied_samples_$N.csv", samples)
end

Supp_F9_data, = calcGD_weighted(dats)
writetable("Supp_WeightedGD_numbers.csv", Supp_F9_data)
